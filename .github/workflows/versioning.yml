name: Versioning

on:
  pull_request:
    types:
      - closed

jobs:
  update_version_and_changelog:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine version bump
        id: get_version_bump
        run: |
          branch_name=${{ github.event.pull_request.head.ref }}
          if [[ $branch_name == major/* || $branch_name == release/* ]]; then
            echo "BUMP=major" >> $GITHUB_ENV
          elif [[ $branch_name == minor/* || $branch_name == feature/* || $branch_name == feat/* || $branch_name == task/* || $branch_name == refactor/* || $branch_name == poc/* || $branch_name == innovation/* ]]; then
            echo "BUMP=minor" >> $GITHUB_ENV
          elif [[ $branch_name == patch/* || $branch_name == bug/* || $branch_name == doc/* || $branch_name == tools/* || $branch_name == hotfix/* ]]; then
            echo "BUMP=patch" >> $GITHUB_ENV
          else
            echo "BUMP=patch" >> $GITHUB_ENV
          fi

      - name: Update version.txt
        run: |
          version=$(cat version.txt)
          bump=${{ env.BUMP }}
          echo "Current version: $version"
          echo "Bump: $bump"
          
          if [[ $bump == "major" ]]; then
            new_version=$(echo $version | awk -F. '{$1 = $1 + 1; $2 = 0; $3 = 0;} 1' OFS=.)
          elif [[ $bump == "minor" ]]; then
            new_version=$(echo $version | awk -F. '{$2 = $2 + 1; $3 = 0;} 1' OFS=.)
          else
            new_version=$(echo $version | awk -F. '{$3 = $3 + 1;} 1' OFS=.)
          fi
          
          echo $new_version > version.txt

      - name: Update CHANGELOG.md
        run: |
          new_version=$(cat version.txt)
          awk -v ver="$new_version" -v title="${{ github.event.pull_request.title }}" '{
          print;
          if (NR==1) {
           print "\n## " ver "\n* " title "\n";
          }
          }' CHANGELOG.md > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md

      - run: git tag -l

      - name: Check and move SQL files and append query
        env:
          MIN_MAJOR_VERSION_DIGITS: 2
          MIN_MINOR_VERSION_DIGITS: 2
          MIN_PATCH_VERSION_DIGITS: 2
          MIN_CHANGESET_DIGITS: 4
        run: |
          set -euxo pipefail

          gen_version() {
            local rawVersion=$1
            local minDigits=$2
            echo -n "$(printf "%0${minDigits}d\n" ${rawVersion})"
          }

          new_version=$(cat version.txt)
          major=$(gen_version $(echo $new_version | cut -d. -f1) $MIN_MAJOR_VERSION_DIGITS)
          minor=$(gen_version $(echo $new_version | cut -d. -f2) $MIN_MINOR_VERSION_DIGITS)
          patch=$(gen_version $(echo $new_version | cut -d. -f3) $MIN_PATCH_VERSION_DIGITS)
          changeset=$(gen_version 0 $MIN_CHANGESET_DIGITS)

          newDBRevisionNumber="${major}${minor}${patch}${changeset}"

          # Check for the presence of both update.sql and rollback.sql
          if [[ -f "database/update.sql" && ! -f "database/rollback.sql" ]] || [[ ! -f "database/update.sql" && -f "database/rollback.sql" ]]; then
            echo "Error: Only one of update.sql or rollback.sql found. Both files must be present."
            exit 1
          fi

          # If update.sql exists
          if [[ -f "database/update.sql" ]]; then
            lastExistingVersion=$(find database/ -name "*.update.sql" | sort -V | tail -n 1 | grep -oP '\d{10}' || echo "0")

            echo -e "\nINSERT INTO db_version (revision, direction) VALUES (${newDBRevisionNumber}, 'update');" >> database/update.sql

            if [[ "${{ env.BUMP }}" == "major" ]]; then
              mkdir -p database/$major.0.x/
              git mv database/update.sql database/$major.0.x/${newDBRevisionNumber}.update.sql
            elif [[ "${{ env.BUMP }}" == "minor" ]]; then
              mkdir -p database/$major.$minor.x/
              git mv database/update.sql database/$major.$minor.x/${newDBRevisionNumber}.update.sql
            elif [[ "${{ env.BUMP }}" == "patch" ]]; then
              mkdir -p database/$major.$minor.x/
              git mv database/update.sql database/$major.$minor.x/${newDBRevisionNumber}.update.sql
            fi
          fi

          # If rollback.sql exists
          if [[ -f "database/rollback.sql" ]]; then
            echo -e "\nINSERT INTO db_version (revision, direction) VALUES (${lastExistingVersion}, 'rollback');" >> database/rollback.sql

            if [[ "${{ env.BUMP }}" == "major" ]]; then
              mkdir -p database/$major.0.x/
              git mv database/rollback.sql database/$major.0.x/${newDBRevisionNumber}.rollback.sql
            elif [[ "${{ env.BUMP }}" == "minor" ]]; then
              mkdir -p database/$major.$minor.x/
              git mv database/rollback.sql database/$major.$minor.x/${newDBRevisionNumber}.rollback.sql
            elif [[ "${{ env.BUMP }}" == "patch" ]]; then
              mkdir -p database/$major.$minor.x/
              git mv database/rollback.sql database/$major.$minor.x/${newDBRevisionNumber}.rollback.sql
            fi
          fi
      

      - name: Set up Git with PAT, Commit, Tag and push
        run: |
          git config --local user.email "sugalvojau@gmail.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}
          git add CHANGELOG.md version.txt database/*
          git commit -m "Update CHANGELOG.md and version.txt"
          
          # Create a tag
          new_version=$(cat version.txt)
          git tag "v$new_version"
          
          # Push changes and tags
          git push
          git push --tags

      - run: git tag -l